{"version":3,"sources":["admin-metablock.js"],"names":["MetaBlock","shortcode_tag","me","this","add_btn_class","remove_btn_class","render_new","element_map","get_element_map","buttons","make_buttons","$","append","element_count","hide_all_elements","add_click_event_handlers","render_edit","element_types","inactive_elements","all_elements","get_element_map_array","forEach","element_id","element","filter","input_values","children","map","idx","elem","val","get","join","preview_images","find","length","push","active_elements","el","includes","max_row","Math","max","apply","parseInt","match","parent","data","removeAttr","hide","attr","toggle_images","elements","on","event","preventDefault","$element","currentTarget","row","element_type","selectName","select2","placeholder","show_element","hide_element","off","each","index","trigger","show","animate","scrollTop","prop","element_is_visible","is","block_style_allows_images","toggle","toArray","item","pos","indexOf","element_names","arr","Array","_","i","x","reduce","y","concat","btn_HTML","types","names","type","jQuery","document","ready","allowed_shortcodes","wp","shortcake","hooks","addAction","shortcode"],"mappings":"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","file":"../admin-blocks.min.js","sourcesContent":["/* eslint no-console: [\"error\", { allow: [\"log\", \"warn\", \"error\"] }] */\n/* global wp */\n\nfunction MetaBlock(shortcode_tag) { // eslint-disable-line no-unused-vars\n\n  var me = this;\n  me.shortcode_tag = shortcode_tag;\n  me.add_btn_class  = me.shortcode_tag + '-add-element';\n  me.remove_btn_class  = me.shortcode_tag + '-remove-element';\n\n\n  /**\n   * Called when a new metablock is rendered in the backend.\n   * @param shortcode Shortcake backbone model.\n   */\n  me.render_new = function () {\n    var element_map = me.get_element_map();\n    var buttons = me.make_buttons(element_map);\n    var $shortcode_div = $('.shortcode-ui-edit-' + me.shortcode_tag);\n    $shortcode_div.append(buttons);\n    var element_count = element_map.element_count;\n    this.hide_all_elements(element_count);\n    this.add_click_event_handlers(element_count);\n  };\n\n  /**\n   * Called when en existing metablock is rendered in the backend.\n   * @param shortcode Shortcake backbone model.\n   */\n  me.render_edit = function () {\n\n    var element_map = me.get_element_map();\n    var element_types = element_map.element_types;\n    var element_count = element_map.element_count;\n\n    var buttons = me.make_buttons(element_map);\n    var $shortcode_div = $('.shortcode-ui-edit-' + me.shortcode_tag);\n    $shortcode_div.append(buttons);\n\n    var inactive_elements = [];\n    var all_elements = me.get_element_map_array(element_count, element_types);\n    all_elements.forEach(function (element_id) {\n      var element = $('.field-block')\n        .filter($('div[class$=\\'_' + element_id + '\\']'));\n      var input_values = element\n        .children()\n        .filter($('input, textarea, select'))\n        .map(function (idx, elem) {\n          return $(elem).val();\n        }).get().join('');\n      var preview_images = element.find('.attachment-previews .attachment-preview');\n      if ('' === input_values && preview_images.length == 0) {\n        inactive_elements.push(element_id);\n      }\n    });\n\n    var active_elements = all_elements.filter(function(el) {\n      return !inactive_elements.includes(el);\n    });\n\n    var max_row = active_elements.length === 0 ? 0 :\n      Math.max.apply(null, active_elements.map(function(el) {\n        return parseInt(el.match(/\\d+$/g)[0]);\n      }));\n\n    $('.' + me.add_btn_class).parent().data('row', max_row);\n    max_row !== 0 && $('.' + me.remove_btn_class).removeAttr('disabled');\n\n    inactive_elements.map(function(element_id) {\n      $('.field-block').filter($('div[class$=\\'_' + element_id + '\\']')).hide();\n    });\n\n    if (all_elements.length - inactive_elements.length === element_count) {\n      $('.' + me.add_btn_class).attr('disabled', 'disabled');\n    }\n\n    this.toggle_images(element_count);\n    this.add_click_event_handlers(element_count);\n  };\n\n  /**\n   * Add click event handlers for add/remove buttons in metablock.\n   */\n  me.add_click_event_handlers = function (element_count) {\n    var elements = this;\n\n    // Add click event handlers for the elements.\n    $('.' + me.add_btn_class).on('click', function (event) {\n      event.preventDefault();\n      var $element = $(event.currentTarget);\n      var row = $element.parent().data('row');\n      var element_type = $element.data('element-type');\n\n      // Special control, if block type added is post, and if input element has special data attribute data-input-transform == js-select2-enable then dynamically transform into select2\n      if (element_type == 'post') {\n        var selectName = 'select[name=\"post_post_'+ (row+1) +'\"]';\n        if ( $(selectName).data('input-transform') === 'js-select2-enable' ) {\n          $(selectName).select2({\n            placeholder: 'Select post',\n          });\n        }\n      }\n\n      if (row <= element_count) {\n        // elements.show_element_type_selector();\n        elements.show_element(++row, element_type, element_count);\n        $element.parent().data('row', row);\n        $('.' + me.remove_btn_class).removeAttr('disabled');\n        if (row === element_count) {\n          $('.' + me.add_btn_class).attr('disabled', 'disabled');\n        }\n      }\n    });\n\n    $('.' + me.remove_btn_class).on('click', function (event) {\n      event.preventDefault();\n      var $element = $(event.currentTarget);\n      var row = $element.parent().data('row');\n\n      if (row >= 0) {\n        elements.hide_element(row--);\n        $element.parent().data('row', row);\n        $('.' + me.add_btn_class).removeAttr('disabled');\n        if (row === 0) {\n          $element.attr('disabled', 'disabled');\n        }\n      }\n    });\n\n    $('input[name=elements_block_style]').off('click').on('click', function() {\n      me.toggle_images(element_count);\n    });\n  };\n\n  /**\n   * Hide a metablock row and reset the values of it's fields.\n   *\n   * @param row\n   */\n  me.hide_element = function (row) {\n    var $element = $('.field-block').filter($('div[class$=\\'_' + row + '\\']'));\n    // Clear all text, textarea fields for this row/element.\n    $element.children().filter($('input, textarea')).each(function (index, element) {\n      $(element).val('').trigger('input').trigger('change');\n    });\n    $element.hide(300);\n  };\n\n  /**\n   * Hide all metablock rows.\n   *\n   * @param row\n   */\n  me.hide_all_elements = function (element_count) {\n    me.get_element_map_array(element_count).forEach(function (row) {\n      $( '.field-block' ).filter( $( 'div[class$=\\'_'+row+'\\']' ) ).hide();\n    });\n  };\n\n  /**\n   * Show a metablock elements selector and scroll to bottom.\n   *\n   * @param row\n   */\n  me.show_element = function (row, element_type, element_count) {\n    $('.field-block').filter($('div[class$=\\'_' + element_type + '_' +row + '\\']')).show(300, function () {\n      me.toggle_images(element_count);\n      $('.media-frame-content').animate({\n        scrollTop: $('.shortcode-ui-content').prop('scrollHeight'),\n      }, 300);\n    });\n  };\n\n  /**\n   * Show/hide images inputs depending on element block style.\n   */\n  me.toggle_images = function(element_count) {\n    me.get_element_map_array(element_count).forEach(function(row) {\n      var element_is_visible = $('.field-block').filter($('div[class$=\\'title_' + row + '\\']')).is(':visible');\n      var block_style_allows_images = 'no_image' != $('input[name=elements_block_style]:checked').val();\n      $('.shortcode-ui-attribute-attachment_'+ row).toggle(element_is_visible && block_style_allows_images);\n    });\n  };\n\n  /**\n   * Called when a new metablock is rendered in the backend.\n   * @param shortcode Shortcake backbone model.\n   */\n  me.get_element_map = function() {\n\n    var element_types = $('[data-element-type]')\n      .map( function() {\n        return $(this).data('element-type');\n      }).toArray();\n    element_types = element_types.filter(function(item, pos) {\n      return element_types.indexOf(item) == pos;\n    });\n\n    var element_names = $('[data-element-name]')\n      .map( function() {\n        return $(this).data('element-name');\n      }).toArray();\n    element_names = element_names.filter(function(item, pos) {\n      return element_names.indexOf(item) == pos;\n    });\n\n    var element_count = $('[data-element-number]')\n      .map( function() {\n        return $(this).data('element-number');\n      }).toArray();\n    element_count = Math.max.apply(null, element_count);\n\n    return {\n      element_types: element_types,\n      element_names: element_names,\n      element_count: element_count\n    };\n\n  };\n\n  me.get_element_map_array = function(element_count, element_types) {\n    var arr = Array.apply(null, Array(element_count));\n    arr = arr.map(function (_, i) { return i + 1; });\n    if(element_types) {\n      arr = arr\n        .map(function(x) {\n          return element_types\n            .map(function(el) {\n              return el + '_' + x;\n            }, []);})\n        .reduce(function(x, y) {\n          return x.concat(y);\n        });\n    }\n    return arr;\n  };\n\n  /**\n   * Called when a new metablock is rendered in the backend.\n   * @param shortcode Shortcake backbone model.\n   */\n  me.make_buttons = function(element_map) {\n    var btn_HTML = '<div data-row=\"0\">';\n    var types = element_map.element_types;\n    var names = element_map.element_names;\n    if( names.length !== types.length ) { names = types; }\n    types.map( function(type, idx) {\n      btn_HTML += (\n        '<button class=\"button button-small ' + me.add_btn_class + '\" data-element-type=\"' + type + '\">Add ' + names[idx] + '</button>'\n      );\n    });\n    btn_HTML += '<button class=\"button button-small ' + me.remove_btn_class + '\" disabled=\"disabled\">Remove Element</button></div>';\n    return btn_HTML;\n  };\n\n}\n\n\njQuery(document).ready(function() {\n\n  var allowed_shortcodes = [\n    'shortcake_metablock',\n    'shortcake_mixed_content_row',\n    'shortcake_repeater',\n    'shortcake_milestones',\n    'shortcake_slideshow',\n    'shortcake_world_slideshow',\n    'shortcake_link_list',\n    'shortcake_people_list',\n    'shortcake_accordion_list',\n    'shortcake_launcher_card',\n    'shortcake_grid_images'\n  ];\n\n  // Attach hooks when rendering a new metablock.\n  wp.shortcake.hooks.addAction('shortcode-ui.render_new', function (shortcode) {\n    var shortcode_tag = shortcode.get('shortcode_tag');\n    if(allowed_shortcodes.includes(shortcode_tag)) {\n      var mb = new MetaBlock(shortcode_tag);\n      mb.render_new();\n    }\n  });\n\n  // Trigger hooks when shortcode renders an existing metablock.\n  wp.shortcake.hooks.addAction('shortcode-ui.render_edit', function (shortcode) {\n    var shortcode_tag = shortcode.get('shortcode_tag');\n    if(allowed_shortcodes.includes(shortcode_tag)) {\n      var mb = new MetaBlock(shortcode_tag);\n      mb.render_edit();\n    }\n  });\n\n});\n"]}